<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="main.foodie.mapper.BoardMapper">

  <resultMap id="PostResultMap" type="main.foodie.domain.board.Post">
    <id property="id" column="id"/>
    <result property="authorId" column="author_id"/>
    <result property="nickname" column="nickname"/>
    <result property="category" column="category"/>
    <result property="title" column="title"/>
    <result property="visibility" column="visibility"
      typeHandler="main.foodie.domain.board.VisibilityTypeHandler"/>
    <result property="content" column="content"/>
    <result property="viewCount" column="view_count"/>
    <result property="likeCount" column="like_count"/>
    <result property="commentCount" column="comment_count"/>
    <result property="createdAt" column="created_at"/>
    <result property="updatedAt" column="updated_at"/>
    <result property="deletedAt" column="deleted_at"/>
  </resultMap>

  <resultMap id="CommentResultMap" type="main.foodie.domain.board.Comment">
    <id property="id" column="id"/>
    <result property="postId" column="post_id"/>
    <result property="parentId" column="parent_id"/>
    <result property="authorId" column="author_id"/>
    <result property="nickname" column="nickname"/>
    <result property="visibility" column="visibility"
      typeHandler="main.foodie.domain.board.VisibilityTypeHandler"/>
    <result property="content" column="content"/>
    <result property="likeCount" column="like_count"/>
    <result property="createdAt" column="created_at"/>
    <result property="updatedAt" column="updated_at"/>
    <result property="deleted" column="deleted"/>
  </resultMap>

  <!-- 게시글 기본 컬럼 -->
  <sql id="postColumns">
    id, author_id, nickname, category, title, visibility,
    content, view_count, like_count, comment_count,
    created_at, updated_at, deleted_at
  </sql>

  <!-- 검색 조건 -->
  <sql id="searchConditions">
    WHERE deleted_at IS NULL

    <!-- 키워드 검색 -->
    <if test="pageRequestDTO.keyword != null and pageRequestDTO.keyword != ''">
      AND (
      title LIKE CONCAT('%', #{pageRequestDTO.keyword}, '%')
      OR content LIKE CONCAT('%', #{pageRequestDTO.keyword}, '%')
      OR nickname LIKE CONCAT('%', #{pageRequestDTO.keyword}, '%')
      )
    </if>

    <!-- 카테고리 필터 -->
    <if test="pageRequestDTO.category != null and pageRequestDTO.category != ''">
      AND category = #{pageRequestDTO.category}
    </if>
  </sql>

  <!-- 정렬 조건 -->
  <sql id="orderByClause">
    ORDER BY
    <choose>
      <when test="pageRequestDTO.safeSort == 'view_count'">
        view_count ${pageRequestDTO.safeDir}, created_at DESC
      </when>
      <when test="pageRequestDTO.safeSort == 'like_count'">
        like_count ${pageRequestDTO.safeDir}, created_at DESC
      </when>
      <when test="pageRequestDTO.safeSort == 'comment_count'">
        comment_count ${pageRequestDTO.safeDir}, created_at DESC
      </when>
      <otherwise>
        created_at ${pageRequestDTO.safeDir}
      </otherwise>
    </choose>
  </sql>

  <!-- insert -->
  <!-- 신규 post -->
  <insert id="savePost" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO post (author_id, nickname, category, title, visibility, content)
    VALUES (#{authorId}, #{nickname}, #{category}, #{title},
    #{visibility, typeHandler=main.foodie.domain.board.VisibilityTypeHandler}, #{content})
  </insert>

  <!-- select -->
  <!-- 단일 post 조회 -->
  <select id="selectPostById" resultMap="PostResultMap">
    SELECT * FROM post WHERE id=#{id} AND deleted_at IS NULL
  </select>

  <!--  전체 post 페이징 조회-->
  <select id="selectPostsWithPaging" resultType="Post">
    SELECT
    <include refid="postColumns"/>
    FROM post
    <include refid="searchConditions"/>
    <include refid="orderByClause"/>
    LIMIT #{pageRequestDTO.size} OFFSET #{pageRequestDTO.offset}
  </select>

  <!-- 전체 게시글 수 조회 -->
  <select id="countPosts" resultType="long">
    SELECT COUNT(*)
    FROM post
    <include refid="searchConditions"/>
  </select>

  <!--  update-->
  <!-- post 업데이트 -->
  <update id="updatePost">
    UPDATE post
    SET nickname=#{nickname},
    category=#{category},
    title=#{title},
    visibility=#{visibility, typeHandler=main.foodie.domain.board.VisibilityTypeHandler},
    content=#{content}
    WHERE id=#{id} AND deleted_at IS NULL
  </update>

  <!--  post 좋아요-->
  <!--  post 좋아요 생성-->
  <insert id="insertPostLike">
    INSERT INTO post_like (post_id, user_id)
    VALUES (#{postId}, #{userId})
  </insert>

  <!-- post 좋아요 삭제 -->
  <delete id="deletePostLike">
    DELETE FROM post_like
    WHERE post_id=#{postId} AND user_id = #{userId}
  </delete>

  <!--  likeCount 증가-->
  <update id="incrementPostLike">
    UPDATE post
    SET like_count = like_count + 1
    WHERE id=#{postId}
  </update>

  <!-- likeCount 감소 -->
  <update id="decrementPostLike">
    UPDATE post
    SET like_count = like_count - 1
    WHERE id=#{postId}
  </update>

  <!-- post 삭제(논리삭제) -->
  <update id="softDeletePost">
    UPDATE post SET delete_at = NOW()
    WHERE id=#{id}
  </update>

  <!-- 신규 comment -->
  <insert id="saveComment" parameterType="Comment" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO comment (post_id, parent_id, author_id, nickname, visibility, content)
    VALUES (#{postId}, #{parentId}, #{authorId}, #{nickname},
    #{visibility, typeHandler=main.foodie.domain.board.VisibilityTypeHandler}, #{content})
  </insert>

  <!--  comment 조회-->
  <select id="findCommentById" resultMap="CommentResultMap">
    SELECT * FROM comment
    WHERE id = #{id} AND deleted = false
  </select>

  <!-- comment 수정 -->
  <update id="updateComment">
    UPDATE comment
    SET
    parent_id=#{parentId},
    visibility=#{visibility, typeHandler=main.foodie.domain.board.VisibilityTypeHandler},
    content=#{content}
    WHERE id=#{id} AND deleted = false
  </update>

  <!--  comment 좋아요-->
  <!--  comment 좋아요 생성-->
  <insert id="insertCommentLike">
    INSERT INTO comment_like (comment_id, user_id)
    VALUES (#{commentId}, #{userId})
  </insert>

  <!-- comment 좋아요 삭제 -->
  <delete id="deleteCommentLike">
    DELETE FROM comment_like
    WHERE comment_id=#{commentId} AND user_id = #{userId}
  </delete>

  <!--  likeCount 증가-->
  <update id="incrementCommentLike">
    UPDATE comment
    SET like_count = like_count + 1
    WHERE id=#{commentId}
  </update>

  <!-- likeCount 감소 -->
  <update id="decrementCommentLike">
    UPDATE comment
    SET like_count = like_count - 1
    WHERE id=#{commentId}
  </update>

  <!--  comment 삭제(논리삭제)-->
  <update id="softDeleteComment">
    UPDATE comment SET deleted = true,
    content = '삭제된 댓글입니다.'
    WHERE id = #{id}
  </update>
</mapper>